# указываем, какая версия docker-compose используется
version: '3.3'
# здесь мы говорим, что ниже будут описаны сервисы,
# указываем имена контейнеров, которые должны быть развернуты
# у нас их 4 - db, backend, frontend, nginx
# и запускаться они должны именно в таком порядке
services:

  # описание контейнера db (база данных)
  db:
    # cкачать образ, из которого должен быть запущен контейнер
    image: postgres:13.0-alpine
    # volume выполняет задачу хранения данных,
    # по сути это директория, доступная для контейнера.
    # контейнер сохраняет данные в volume и
    # они будут там храниться независимо от состояния контейнера
    # Примонтируем том - ниже указан
    # volume и связанная с ним директория в контейнере.
    volumes:
      - postgres_database:/var/lib/postgresql/data/
    # адрес файла, где хранятся переменные окружения
    env_file:
      - ./.env
    # пробросить порты
    # ports:
    #   - 127.0.0.1:5432:5432


  backend:
    image: elenashow/foodgram_backend
    # build:
    #   # т.к Dockerfile для сборки образа нашего проекта находится в другой папке,
    #   # то укажем сначала context - подняться на директорию
    #   # выше, перейти в директорию backends
    #   # а уже потом относительно этой директории укажем Dockerfile,
    #   # на основе которого будем билдить образ
    #   context: ../backend
    #   dockerfile: Dockerfile
    # перезапускать всегда, когда возникает ошибка или сервер перезапускается
    restart: always
    # укажем тома
    volumes:
      # Django будет собирать статику в том static_value
      # Контейнер backend будет работать с данными, хранящиеся в томе static_value,
      # через свою директорию /app/static/
      - static_value:/app/static/
      # Данные, хранящиеся в томе media_value, будут доступны в контейнере web
      # через директорию /app/media/
      - media_value:/app/media/
      # указываем зависимость -
      # этот контейнер web должен запускаться после запуска контейнера db
    depends_on:
      - db
      # адрес файла, где хранятся переменные окружения
    env_file:
      - ./.env
      # для нашего приложения в контейнере backend не указываем порт -
      # чтобы все запросы шли только через nginx


  frontend:
    image: elenashow/foodgram_frontend
    # build:
    #   context: ../frontend
    #   dockerfile: Dockerfile
    volumes:
      - ../frontend/:/app/result_build/
      # здесь ../frontend/ - директория фронтенда нашего проекта,
      # где лежит собранная версия сайта, то есть статика
      # /app/result_build/ - это директория внутри контейнера frontend
      # через эту директорию контейнер будет взаимодействовать с данными в томе
      # далее этот том нужно примонтировать к контейнеру nginx
    depends_on:
      - backend




  nginx:
    # указываем базовый образ для скачивания с DockerHub
    image: nginx:1.19.3
    # запросы с внешнего порта 80 перенаправляем на внутренний порт 80
    ports:
      - "80:80"
    # далее указываем тома
    volumes:
      # данные хранящиеся в главном файле конфигураций nginx будут доступны
      # через директорию etc/nginx/conf.d/default.conf
      # При сборке контейнера nginx нужно копировать созданный конфиг nginx из исходной директории
      # в контейнер и сохранить его в директорию /etc/nginx/conf.d/
      - ./nginx.conf:/etc/nginx/conf.d/default.conf


      # все статичные файлы для фронтенда (том frontend/build/) в контейнере nginx
      # будут доступны через директорию /usr/share/nginx/html/
      # внутри этого тома /frontend/build/ вся статика фронтэнда
      # /usr/share/nginx/html/ - эта директория указана в конфигурации nginx
      # а конфигурация в свою очередь зашита в базовом образе
      # в базовом образе nginx конфигурация
      # уже готова отдавать статику именно из этой директории.
      - ../frontend/build:/usr/share/nginx/html/


      # вся документация по api/docs/ (том docs) будет доступна через директорию
      # /usr/share/nginx/html/api/docs/
      - ../docs/:/usr/share/nginx/html/api/docs/

      # далее нужно примонтировать тома со статикой и медиа к контейнеру nginx
      #  так как эти тома используются и контейнером backend, и контейнером nginx
      # (т.е  укажем те тома, которые указаны в контейнере backend, куда бэк складывает свою статику)
      # данные хранящиеся в томе static_value в контейнере nginx
      # будут доступны через свою директорию /var/html/static/
      - static_value:/var/html/static/


      # данные хранящиеся в томе media_value в контейнере nginx
      # будут доступны через директорию /var/html/media/
      - media_value:/var/html/media/
      # эти два тома со статикой и медиа - общие для backend и nginx

    # запуск этого контейнера происходит после запуска контейнера frontend
    depends_on:
      - frontend
    restart: always


volumes:
  # тома static_value и media_value - общие для nginx и backend
  # наше Django-приложение из контейнера backend будет собирать статику и медиа в эти тома
  # а сервер nginx из другого контейнера(nginx) - будет раздавать статику и медиа из них
  static_value:
  media_value:
  postgres_database:

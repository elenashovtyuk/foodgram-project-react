server {
    # в этой строке серверу nginx указано обрабатывать запросы,
    # поступившие на 80-ый порт сервера
    listen 80;
    # Список IP, запросы к которым должен обрабатывать nginx
    # пока проект разворачивается локально, поэтому nginx
    # должен обрабатывать запросы к 127.0.0.1.
    # Если разворачивать контейнеры на удалённом сервере,
    # здесь должен быть указан IP или доменное имя этого сервера
    # server_name 127.0.0.1;
    server_name 51.250.111.182;
    # для того, чтобы скрыть версию сервера nginx
    # на страницах ошибок
    server_tokens off;

    # ГОТОВЫЕ LOCATION
    # в этом location определяем по каким путям идет поиск статики
    # Cогласно ТЗ должна быть настроена раздача статики и медиа:
    # при запросе к /static/ nginx будет вести поиск в
    # /usr/share/nginx/html/ - т.к в базовом образе именно эта директория
    # предназначена для раздачи статики
    # согласно docker-compose эта директория отвечает за взаимодействие
    # со статикой фронтенда, но есть еще и статика бэкенда

    location /static/ {
        # cтатику ищем в первую очередь в
        # корневой директории для раздачи статики nginx-ом
        # usr/share/nginx/html/
        # если здесь находится статика, то дальше поиск не идет
        # и до конструкции try_files дело даже не доходит
        root /usr/share/nginx/html/;

        # если же в фронтовой директории со статикой не находится нужное
        # то переходим к конструкции try_files
        # в которой мы указываем, что /static/ нужно искать в другой рутовой директории
        # то есть, @backend_static просто меняет рутовую директорию, в которой теперь
        # будем искать - теперь это будет не директория для статики фронта, а директория
        # для статики бэкенда
        try_files $uri @backend_static;
    }
    # в этом локейшн указываем как раз в какой рутовой директории ищем
    location @backend_static{
      root /var/html/;
    }
    # Настройка location/media:
    # запросы к адресу /media/ будут перенаправлены
    # в директорию /var/html/media/
    location /media/ {
        root /var/html/;
    }



    # Cогласно ТЗ Django-админка работает только через Gunicorn
    # если будет запрос на админ-страницу, то nginx перенаправит
    # такой запрос к  контейнеру с Gunicorn
    #т.е на http://backend:8000/admin/
    location /admin/ {
        proxy_pass http://backend:8000/admin/;
    }


     location /api/ {
        proxy_set_header        Host $host;
        proxy_set_header        X-Forwarded-Host $host;
        proxy_set_header        X-Forwarded-Server $host;
        proxy_pass http://backend:8000;
    }


    # Верно
    # если поступит запрос на апишную документацию
    # (т.е необходимо вернуть статические файлы)
    # nginx сам обработает этот запрос
    # root-каталог находится по адресу /usr/share/nginx/html/
    # все файлы, которые находятся в нем автоматически обслуживаются сервером
    location /api/docs/ {
        # root, корневая директория та же, что и для статики фронтенда
        # это корневая директория для раздачи статики nginx-ом
        # usr/share/nginx/html/
        root /usr/share/nginx/html;
        # далее с помощью конструкции try_files указываем искать api/docs
        # сначала как файл в этой рутовой директории
        # это параметр $uri - то есть запрос будет следующий в итоге
        # usr/share/nginx/html/api/docs (root + uri)
        # если же такого файла в корневой директории не найдется,
        # то дальше для поиска используем параметр $uri/ -
        # то есть, api/docs как каталог, в котором нужно найти файл
        # то есть, запрос будет следующий -
        # usr/share/nginx/html/api/docs/redoc.html
        # ищем в root/$uri(т.е в usr/share/nginx/html/api/docs/) файл redoc.html
        try_files $uri $uri/redoc.html;
    }

    location / {
        root /usr/share/nginx/html;
        index  index.html index.htm;
        try_files $uri /index.html;
        proxy_set_header        Host $host;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $scheme;
      }
      error_page   500 502 503 504  /50x.html;
      location = /50x.html {
        root   /var/html/frontend/;
      }

}
